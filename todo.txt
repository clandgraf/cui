

TODO
====

 --> Factor out window base class to use for minibuffer.
     -> cui.message should be able to use _render_line_part
     -> cui.message should only render first line of input to minibuffer

 --> API: resize windows, ratio may be suboptimal here, wm.resize-calls should be able to
     handle columns/rows as input

 --> API: cui.message(log=True)
     Write message to minibuffer. Additional parameter that determines wether message
     is written to LogBuffer. Default is true

 --> API: Variable Access
     set_localvar: if value is defined in buffer, set in buffer else error
     get_localvar: read variable from buffer
     def_localvar: if initializer, use that, else read from core (if None initialize with None)


Manual
======

Window/Buffer synchronized Variables

- Saved in state['win/buf'] in both window and buffer

- If window is selected sync window -> buffer
- If buffer is switched
  -> Drop all of windows win/buf variables
  -> Copy all of new buffers win/buf variables to window
- Modifying buffer or window values syncs to the other if buffer is displayed in selected window
- Emacs syncs on deselect from buffer to window (but since all variables are synced when modified)
  but since we sync directly this should not be necessary


- win/buf variables

  point
  first_row
  log_stay_on_bottom
