

TODO
====
 --> if color-customization fails, this should just render a message, not raise any exceptions,
     as the software should still be able to run, and the same instance should be runnable on
     different terminals

 --> Close all sessions on program exit
     --> hooks must be called

 --> Improve code highlighting api (in emacs)
     - Should support multiple sessions, each with multiple suspended threads
     - Each thread may display multiple frames
       (primary-color for currently selected frame, secondary-color for all other frames)

     Lisp data structure:
       hash_map: session_id => hash_map: thread_id => alist: [primary, secondary: list]
       hash_map: session_id => hash_map: thread_id => hash_map: file:line => overlay

     Behaviour:
       on_select_frame:  secondaries are created when switching frames, while moving primary to current frame
       on_suspend:       initialize primary.
       on_resume:        remove all secondaries, hide primary
       on_kill_thread:   remove map with thread_id (primary, all secondaries)
       on_kill_session:  on_kill_thread for all sessions

 --> Bug when ThreadBufferMixin is last in list:
       'CodeBuffer' object has no attribute 'set_frame'

 --> remove D_Frame class use dict instead

 --> Move generic Server-Session handling code to cui.tools
     --> Raise exception when socket is not detected as closed, but read returns len == 0
         terminate session

 --> Create Frames: WindowManager -> Frame -> Window

 --> Kill Buffers:
     --> pydevds Close all associated buffers when session terminates

 --> Pydevds Layouting in user definable hook

 --> Deleting windows: Focus previous window in window order

 --> API: resize windows, ratio may be suboptimal here, wm.resize-calls should be able to
     handle columns/rows as input

 --> API: Variable Access
     set_localvar: if value is defined in buffer, set in buffer else error
     get_localvar: read variable from buffer
     def_localvar: if initializer, use that, else read from core (if None initialize with None)


Manual
======

Window/Buffer synchronized Variables

- Saved in state['win/buf'] in both window and buffer

- If window is selected sync window -> buffer
- If buffer is switched
  -> Drop all of windows win/buf variables
  -> Copy all of new buffers win/buf variables to window
- Modifying buffer or window values syncs to the other if buffer is displayed in selected window
- Emacs syncs on deselect from buffer to window (but since all variables are synced when modified)
  but since we sync directly this should not be necessary


- win/buf variables

  point
  first_row
  log_stay_on_bottom
